/*
Attempts to analyse return values and debug messages.

To check values generated by debug messages set `(global.json).debug` to `true` and use (for example):

    ./d2j test/experiments.jsonnet main.libsonnet 0

To test different use cases, uncomment what is needed.
*/


local kcm = import '../main.libsonnet';

kcm.new('my-namespace', 'my-cluster', 'gke')

// example of patching where no function has been defined
/*
+ {
  config+:: {
    local this = self,

    name: 'my-monitoring-pck-name',
    externalPrefix: 'mympn_',

    commonLabels+: { 'mympn.co/custom-label1': 'custom-value1' },
    externalLabels+: { [this.externalPrefix + 'custom_ext_label1']: 'custom-ext-value1' },

    vector+: { metricsPort: 9797 },
  },
}
*/


// examples of functions use:

// withMonitoredNamespacesMixin
//+ kcm.withMonitoredNamespacesMixin(['namespace-1','namespace-2'])
//+ kcm.withMonitoredNamespacesMixin(['next-namespace-999'])
//+ kcm.withMonitoredNamespacesMixin(['next-namespace-3'])
//+ kcm.withMonitoredNamespacesMixin(['next-namespace-999'])
//+ kcm.withMonitoredNamespacesMixin(['next-namespace-999'])
//+ kcm.withMonitoredNamespacesMixin(['namespace-1','namespace-2'] + ['next-namespace-3'] + ['next-namespace-999'])

// withPrometheusRemoteWriteMixin
//+ kcm.withPrometheusRemoteWriteMixin([{url:'https://a.co'}, {url:'https://b.co'}])
//+ kcm.withPrometheusRemoteWriteMixin([{name: 'remote1', url: 'https://remote1.cc.co'}])
//+ kcm.withPrometheusRemoteWriteMixin([{name: 'remote2', url: 'https://remote2.cc.co'}])

// withVectorConfigsMixin
// checks:
//  ./d2j test/example.jsonnet main.libsonnet 0 | jq '.vector.configs|keys'
//  ./d2j test/example.jsonnet vector.libsonnet 0 | jq '.vector.configs|keys'
//  ./d2j test/example.jsonnet vector.libsonnet 22 | jq 'keys'
/*
+ kcm.withVectorConfigsMixin(
  {
    'config_file1.json': {
      sinks: {
        new_sink: {
          type: 'fake',
          other: '...'
        }
      }
    }
  }
)
*/
/*
+ kcm.withVectorConfigsMixin(
  {
    'config_file2.json': {
      sinks: {
        new_sink: {
          type: 'fake',
          other: '...'
        }
      }
    }
  }
)
*/
/*
+ kcm.withVectorConfigsMixin(
  {
    'config_file2.json': {
      sinks: {
        redefined_sink: {
          type: 'one more fake',
        }
      }
    }
  }
)
*/

// withVectorEnvFromSecretRefMixin
//+ kcm.withVectorEnvFromSecretRefMixin(['secret1'])
//+ kcm.withVectorEnvFromSecretRefMixin(['secret88','secret99'])
//+ kcm.withVectorEnvFromSecretRefMixin(['secret1'])
//+ kcm.withVectorEnvFromSecretRefMixin(['secret1'])
