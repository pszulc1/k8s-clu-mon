/*
Customized kube-prometheus
*/

local k = import 'k.libsonnet';
local service = k.core.v1.service;

local prometheusAgent = (import 'po.libsonnet').monitoring.v1alpha1.prometheusAgent;

local debug = (import 'debug.libsonnet')(std.thisFile, (import 'global.json').debug);

local arrayDiff(A, B) = {
  'A-B': std.filter(function(x) (!std.member(B, x)), A),
  'B-A': std.filter(function(x) (!std.member(A, x)), B),
};


function(params)

  local config =
    {
      namespace: error 'must provide namespace',

      promotedPodLabels: [],
      externalLabels: {},

      monitoredNamespaces: [],

      'kube-prometheus': {
        platform: null,
        remoteWrite: [],
      },
    }
    + params
  ;


  local kpConfigured =
    (import 'kube-prometheus/main.libsonnet')
    + {
      values+:: {
        common+: {
          namespace: config.namespace,
          platform: config['kube-prometheus'].platform,
        },
        prometheus+: {
          namespaces: std.set(super.namespaces + config.monitoredNamespaces),  // duplication excluded
        },
        kubernetesControlPlane+: {
          kubeProxy: true,
        },
      },
    }
  ;

  local kpCustomized =
    kpConfigured
    + {
      [_component]+: {
        prometheusRule:: {},
      }
      for _component in std.objectFields(kpConfigured)
    }
    + {
      alertmanager:: {},
      grafana:: {},
      kubePrometheus:: {},
      pyrra:: {},
    }
    + {
      nodeExporter+: {
        daemonset+: {
          spec+: {
            template+: {
              spec+: {
                // Doesn't start in GKE cluster with priorityClassName defined as 'system-cluster-critical' (default)
                // The case should be analyzed. What about other platforms?
                [if config['kube-prometheus'].platform == 'gke' then 'priorityClassName']:: {},
              },
            },
          },
        },
      },
    }
    + {
      prometheus+: {

        prometheus+:: {
          spec+: {
            alerting:: {},
          },
        },

        local promBase = self,

        local promInstance = promBase.prometheus.metadata.name,
        local promAgentPod = 'prometheus-agent',
        local labels = promBase.prometheus.metadata.labels,

        prometheusAgent:
          // https://prometheus.io/blog/2021/11/16/agent/
          // https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/prometheus-agent.md
          // jsonnet vendor/prometheus-operator/prometheusagents-crd.json | jq '.spec.versions[0].schema.openAPIV3Schema.properties.spec.properties|keys'
          prometheusAgent.new(promInstance)
          + prometheusAgent.metadata.withNamespace(config.namespace)
          + prometheusAgent.metadata.withLabels(labels)
          + prometheusAgent.spec.withReplicas(1)
          + prometheusAgent.spec.withVersion(promBase.prometheus.spec.version)
          + prometheusAgent.spec.withImage(promBase.prometheus.spec.image)
          + prometheusAgent.spec.podMetadata.withLabels(
            labels
            {
              // labels and values generated by the prometheus operator:
              'app.kubernetes.io/version':: 'generated-by-the-operator',
              'app.kubernetes.io/instance': promInstance,  // set to the same value as generated
              'app.kubernetes.io/name': promAgentPod,  // set to the same value as generated
            }
          )
          + prometheusAgent.spec.withServiceAccountName(promBase.serviceAccount.metadata.name)
          + prometheusAgent.spec.withNodeSelector(promBase.prometheus.spec.nodeSelector)
          + prometheusAgent.spec.resources.withRequests({ memory: '100Mi' })
          + prometheusAgent.spec.securityContext.withFsGroup(promBase.prometheus.spec.securityContext.fsGroup)
          + prometheusAgent.spec.securityContext.withRunAsNonRoot(promBase.prometheus.spec.securityContext.runAsNonRoot)
          + prometheusAgent.spec.securityContext.withRunAsUser(promBase.prometheus.spec.securityContext.runAsUser)
          + prometheusAgent.spec.withRemoteWrite(config['kube-prometheus'].remoteWrite)
          + prometheusAgent.spec.podMonitorNamespaceSelector.withMatchLabels({})
          + prometheusAgent.spec.podMonitorSelector.withMatchLabels({})
          + prometheusAgent.spec.probeNamespaceSelector.withMatchLabels({})
          + prometheusAgent.spec.probeSelector.withMatchLabels({})
          + prometheusAgent.spec.serviceMonitorNamespaceSelector.withMatchLabels({})
          + prometheusAgent.spec.serviceMonitorSelector.withMatchLabels({})
          + prometheusAgent.spec.withPodTargetLabels(config.promotedPodLabels)
          + prometheusAgent.spec.withExternalLabels(config.externalLabels)
        ,

        service+:
          service.spec.withSelector(promBase.prometheusAgent.spec.podMetadata.labels),

      },
    }
  ;


  kpCustomized

  + debug.new('##0', config)
  + debug.new('##1', arrayDiff(std.objectFields(kpConfigured), std.objectFields(kpCustomized)))
  + debug.new('##2', kpConfigured.prometheus.prometheus)
  + debug.new(
    '##3', arrayDiff(
      std.objectFields(kpConfigured.prometheus),
      std.objectFields(kpCustomized.prometheus)
    )
  )
  + debug.new(
    '##4', arrayDiff(
      std.objectFields(kpConfigured.prometheus.prometheus.spec),
      std.objectFields(kpCustomized.prometheus.prometheusAgent.spec),
    )
  )
